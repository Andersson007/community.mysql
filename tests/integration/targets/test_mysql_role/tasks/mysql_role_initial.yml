# Test code for mysql_role module

- vars:
    mysql_parameters: &mysql_params
      login_user: '{{ mysql_user }}'
      login_password: '{{ mysql_password }}'
      login_host: 127.0.0.1
      login_port: '{{ mysql_primary_port }}'

    task_parameters: &task_params
      register: result

  block:

  - name: Get server version
    mysql_info:
      <<: *mysql_params
    register: srv

  - name: When run with unsupported server versions, must fail
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: test
    ignore_errors: yes

  - name: Must fail when meet unsupported version
    assert:
      that:
      - result is failed
      - result is search('Roles are not supported by the server')
    when:
    - srv['version']['major'] < 8

  # Skip unsupported versions
  - meta: end_play
    when:
    - srv['version']['major'] < 8

  #########
  # Prepare
  - name: Create db {{ test_db }}
    <<: *task_params
    mysql_query:
      <<: *mysql_params
      query: 'CREATE DATABASE {{ test_db }}'

  - name: Create table {{ test_table }}
    <<: *task_params
    mysql_query:
      <<: *mysql_params
      login_db: '{{ test_db }}'
      query: 'CREATE TABLE {{ test_table }} (id int)'

  - name: Create users
    <<: *task_params
    mysql_user:
      <<: *mysql_params
      name: '{{ item }}'
    loop:
    - '{{ user0 }}'
    - '{{ user1 }}'
    - '{{ user2 }}'

  ###########
  # Run tests

  # TODO After every step add a check of actual state
  # with mysql_query and assert
  - name: Create role {{ role0 }} in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user0 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Create role {{ role0 }}
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user0 }}'

  - name: Check
    assert:
      that:
      - result is changed

  - name: Create role {{ role0 }} again in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Create role {{ role0 }} again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Drop role {{ role0 }} in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: absent
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Drop role {{ role0 }}
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: absent

  - name: Check
    assert:
      that:
      - result is changed

  - name: Drop role {{ role0 }} again in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: absent
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Drop role {{ role0 }} again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: absent

  - name: Check
    assert:
      that:
      - result is not changed

  # ==================
  - name: Create role {{ role0 }} in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user0 }}'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Create role {{ role0 }}
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user0 }}'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'

  - name: Check
    assert:
      that:
      - result is changed

  - name: Create role {{ role0 }} in check_mode again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user0 }}'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Create role {{ role0 }} again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user0 }}'
      priv:
        '*.*': 'SELECT,INSERT'
        'mysql.*': 'UPDATE'

  - name: Check
    assert:
      that:
      - result is not changed

  # ##############################################
  # Test rewriting / appending / detaching members
  # ##############################################

  # Rewriting members
  - name: Rewrite members in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Rewrite members
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'

  - name: Check
    assert:
      that:
      - result is changed

  - name: Rewrite members again in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Rewrite members again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'

  - name: Check
    assert:
      that:
      - result is not changed

  # Append members
  - name: Append a member in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      append_members: yes
      members:
      - '{{ user0 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Append a member
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      append_members: yes
      members:
      - '{{ user0 }}'

  - name: Check
    assert:
      that:
      - result is changed

  - name: Append a member again in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      append_members: yes
      members:
      - '{{ user0 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Append a member again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      append_members: yes
      members:
      - '{{ user0 }}'

  - name: Check
    assert:
      that:
      - result is not changed

  # Detach users
  - name: Detach users in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      detach_members: yes
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Detach users
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      detach_members: yes
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'

  - name: Check
    assert:
      that:
      - result is changed

  - name: Detach users in check_mode again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      detach_members: yes
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is not changed

  - name: Detach users again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      detach_members: yes
      members:
      - '{{ user1 }}'
      - '{{ user2 }}'

  - name: Check
    assert:
      that:
      - result is not changed

  # ##########
  # Test privs
  # ##########

  - name: Create test DBs
    <<: *task_params
    mysql_query:
      <<: *mysql_params
      query: 'CREATE DATABASE {{ item }}'
    loop:
    - '{{ test_db1 }}'
    - '{{ test_db2 }}'

  - name: Create table {{ test_table }}
    <<: *task_params
    mysql_query:
      <<: *mysql_params
      login_db: '{{ item }}'
      query: 'CREATE TABLE {{ test_table }} (id int)'
    loop:
    - '{{ test_db1 }}'
    - '{{ test_db2 }}'

  - name: Append privs in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      priv: '{{ test_db1 }}.{{ test_table }}:SELECT,INSERT/{{ test_db2 }}.{{ test_table }}:DELETE'
      append_privs: yes
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Append privs
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      priv: '{{ test_db1 }}.{{ test_table }}:SELECT,INSERT/{{ test_db2 }}.{{ test_table }}:DELETE'
      append_privs: yes

  - name: Check
    assert:
      that:
      - result is changed

  - name: Append privs again in check_mode
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      priv: '{{ test_db1 }}.{{ test_table }}:SELECT,INSERT/{{ test_db2 }}.{{ test_table }}:DELETE'
      append_privs: yes
    check_mode: yes

  # TODO it must be changed. The module uses user_mod function
  # taken from mysql_user module. It's a bug / expected behavior
  # because I added a similar tasks to mysql_user tests
  # https://github.com/ansible-collections/community.mysql/issues/50#issuecomment-871216825
  # and it's also failed. Create an issue after the module is merged to avoid conflicts.
  # TODO Fix this after user_mod is fixed.
  - name: Check
    assert:
      that:
      - result is changed

  - name: Append privs again
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      priv: '{{ test_db1 }}.{{ test_table }}:SELECT,INSERT/{{ test_db2 }}.{{ test_table }}:DELETE'
      append_privs: yes

  # TODO it must be changed. The module uses user_mod function
  # taken from mysql_user module. It's a bug / expected behavior
  # because I added a similar tasks to mysql_user tests
  # https://github.com/ansible-collections/community.mysql/issues/50#issuecomment-871216825
  # and it's also failed. Create an issue after the module is merged to avoid conflicts.
  # TODO Fix this after user_mod is fixed.
  - name: Check
    assert:
      that:
      - result is changed

  - name: Rewrite privs
    <<: *task_params
    mysql_role:
      <<: *mysql_params
      name: '{{ role0 }}'
      state: present
      priv:
        '*.*': 'SELECT'
    check_mode: yes

  - name: Check
    assert:
      that:
      - result is changed

  always:
  # Clean up
  - name: Drop DBs
    mysql_query:
      <<: *mysql_params
      query: 'DROP DATABASE {{ item }}'
    loop:
    - '{{ test_db }}'
    - '{{ test_db1 }}'
    - '{{ test_db2 }}'
